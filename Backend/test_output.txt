============================= test session starts =============================
platform win32 -- Python 3.11.1, pytest-8.3.2, pluggy-1.5.0 -- C:\Users\Enis Bukalo\Documents\Venvs\Kratos\Scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Enis Bukalo\Documents\GitHub\Kratos\Backend
plugins: anyio-4.4.0, asyncio-0.23.8
asyncio: mode=Mode.STRICT
collecting ... collected 18 items

tests/test_exercises.py::test_create_exercise PASSED                     [  5%]
tests/test_exercises.py::test_get_exercises PASSED                       [ 11%]
tests/test_exercises.py::test_delete_exercises PASSED                    [ 16%]
tests/test_exercises.py::test_update_exercises PASSED                    [ 22%]
tests/test_sets.py::test_create_set PASSED                               [ 27%]
tests/test_sets.py::test_get_sets PASSED                                 [ 33%]
tests/test_sets.py::test_delete_sets PASSED                              [ 38%]
tests/test_sets.py::test_update_sets PASSED                              [ 44%]
tests/test_users.py::test_create_user PASSED                             [ 50%]
tests/test_users.py::test_get_users PASSED                               [ 55%]
tests/test_users.py::test_delete_users PASSED                            [ 61%]
tests/test_users.py::test_update_users PASSED                            [ 66%]
tests/test_workouts.py::test_create_workout PASSED                       [ 72%]
tests/test_workouts.py::test_get_workouts PASSED                         [ 77%]
tests/test_workouts.py::test_delete_workouts PASSED                      [ 83%]
tests/test_workouts.py::test_update_workouts PASSED                      [ 88%]
tests/test_workouts.py::test_get_latest_workout FAILED                   [ 94%]
tests/test_workouts.py::test_update_workouts_null_started_at FAILED      [100%]

================================== FAILURES ===================================
___________________________ test_get_latest_workout ___________________________

self = <sqlalchemy.engine.base.Connection object at 0x0000023C25E05D10>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x0000023C25D63A90>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x0000023C25D9A5D0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x0000023C25D98710>
parameters = [(1,)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\base.py:1967: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x0000023C25D63A90>
cursor = <sqlite3.Cursor object at 0x0000023C25DC8A40>
statement = 'UPDATE workouts SET  WHERE workouts.id = ?', parameters = (1,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x0000023C25D9A5D0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: near "WHERE": syntax error

..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\default.py:941: OperationalError

The above exception was the direct cause of the following exception:

client = <starlette.testclient.TestClient object at 0x0000023C25D62710>
generate_workouts = [WorkoutReply(id=1, name='ASWBXWJRNLJQRRKTCWKYWYBRB', started_at=datetime.datetime(2024, 11, 16, 22, 8, 58, 418779), s...y(id=6, name='HFGHCHDSGJGOARBTVLQKORPOB', started_at=datetime.datetime(2024, 11, 16, 22, 8, 58, 446782), sets=[]), ...]

    def test_get_latest_workout(client: TestClient, generate_workouts: list[schemas.WorkoutReply]):
        # Update workouts with different started_at times
        for i, workout in enumerate(generate_workouts):
            started_at = datetime.now() + timedelta(hours=i)
>           response = client.put(f"/Workout/{workout.id}", json={"started_at": started_at.isoformat()})

tests\test_workouts.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\testclient.py:668: in put
    return super().put(
..\..\..\Venvs\Kratos\Lib\site-packages\httpx\_client.py:1182: in put
    return self.request(
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\testclient.py:516: in request
    return super().request(
..\..\..\Venvs\Kratos\Lib\site-packages\httpx\_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
..\..\..\Venvs\Kratos\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
..\..\..\Venvs\Kratos\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
..\..\..\Venvs\Kratos\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
..\..\..\Venvs\Kratos\Lib\site-packages\httpx\_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\testclient.py:398: in handle_request
    raise exc
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\testclient.py:395: in handle_request
    portal.call(self.app, scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\anyio\from_thread.py:287: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
..\..\..\..\AppData\Local\Programs\Python\Python311\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
..\..\..\..\AppData\Local\Programs\Python\Python311\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
..\..\..\Venvs\Kratos\Lib\site-packages\anyio\from_thread.py:218: in _call_func
    retval = await retval_or_awaitable
..\..\..\Venvs\Kratos\Lib\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\middleware\errors.py:186: in __call__
    raise exc
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\middleware\errors.py:164: in __call__
    await self.app(scope, receive, _send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\middleware\cors.py:85: in __call__
    await self.app(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\middleware\exceptions.py:65: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\routing.py:756: in __call__
    await self.middleware_stack(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\routing.py:776: in app
    await route.handle(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\routing.py:297: in handle
    await self.app(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\routing.py:77: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
..\..\..\Venvs\Kratos\Lib\site-packages\starlette\routing.py:72: in app
    response = await func(request)
..\..\..\Venvs\Kratos\Lib\site-packages\fastapi\routing.py:278: in app
    raw_response = await run_endpoint_function(
..\..\..\Venvs\Kratos\Lib\site-packages\fastapi\routing.py:191: in run_endpoint_function
    return await dependant.call(**values)
app\routers\workouts.py:68: in update_workout
    query.update(update_data, synchronize_session=False)
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\orm\query.py:3251: in update
    result: CursorResult[Any] = self.session.execute(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\orm\session.py:2362: in execute
    return self._execute_internal(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\orm\session.py:2247: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\orm\bulk_persistence.py:1649: in orm_execute_statement
    return super().orm_execute_statement(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\orm\context.py:293: in orm_execute_statement
    result = conn.execute(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\base.py:1418: in execute
    return meth(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\sql\elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\base.py:1846: in _execute_context
    return self._exec_single_context(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\base.py:1967: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x0000023C25D63A90>
cursor = <sqlite3.Cursor object at 0x0000023C25DC8A40>
statement = 'UPDATE workouts SET  WHERE workouts.id = ?', parameters = (1,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x0000023C25D9A5D0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near "WHERE": syntax error
E       [SQL: UPDATE workouts SET  WHERE workouts.id = ?]
E       [parameters: (1,)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

..\..\..\Venvs\Kratos\Lib\site-packages\sqlalchemy\engine\default.py:941: OperationalError
____________________ test_update_workouts_null_started_at _____________________

client = <starlette.testclient.TestClient object at 0x0000023C26F8C810>
generate_workouts = [WorkoutReply(id=1, name='ZSHJUZAKQJMQSBGENAPONRIQK', started_at=datetime.datetime(2024, 11, 16, 22, 8, 59, 154853), s...y(id=6, name='OZQDEQHARAZUKSGYNRLITCSNF', started_at=datetime.datetime(2024, 11, 16, 22, 8, 59, 183856), sets=[]), ...]

    def test_update_workouts_null_started_at(client: TestClient, generate_workouts: list[schemas.WorkoutReply]):
        for workout in generate_workouts:
            new_name = "".join(random.choices(string.ascii_uppercase, k=STRING_LENGTH))
    
            # Try to update with null started_at
            response = client.put(f"/Workout/{workout.id}", json={"name": new_name, "started_at": None})
>           assert response.status_code == 400
E           assert 200 == 400
E            +  where 200 = <Response [200 OK]>.status_code

tests\test_workouts.py:93: AssertionError
=========================== short test summary info ===========================
FAILED tests/test_workouts.py::test_get_latest_workout - sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near "WHERE": syntax error
[SQL: UPDATE workouts SET  WHERE workouts.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
FAILED tests/test_workouts.py::test_update_workouts_null_started_at - assert 200 == 400
 +  where 200 = <Response [200 OK]>.status_code
======================== 2 failed, 16 passed in 4.35s =========================
